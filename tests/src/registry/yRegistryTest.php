<?php

require_once dirname(__FILE__).'/../../../src/registry/yRegistry.php';

class yRegistryTestObject{
    protected $_s = '';
    public function __construct($s){
        $this->_s = $s;
    }
    public function __toString(){
        return (string) $this->_s;
    }
}

/**
 * Test class for yRegistry.
 * Generated by PHPUnit on 2011-05-30 at 10:31:02.
 */
class yRegistryTest extends PHPUnit_Framework_TestCase{
    /**
     * @var yRegistry
     */
    protected $object;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(){
        
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(){
        
    }
    public function testAppend(){
        $r = new yRegistry();
        $a = new yRegistryTestObject('a');
        // strval($a) = 'a'
        $r->set($a, 'b');
        $r->append($a, 'c');
        $this->assertEquals('bc', $r->get('a'));
    }
    public function testSetGet(){
        $r = new yRegistry();
        $a = new yRegistryTestObject('a');
        $this->assertEquals(null, $r->get($a));
        $r->set('a', 'b');
        $this->assertEquals('b', $r->get('a'));
        $this->assertEquals(null, $r->get('c'));
        $this->assertEquals(false, $r->get('c', false));
        $r->set('a', null);
        $this->assertEquals(false, $r->get('a', false));
    }
    public function testPush(){
        $r = new yRegistry();
        $a = new yRegistryTestObject('a');
        $b = new yRegistryTestObject('b');
        $r->set('a', array('b'));
        $r->push($a, 'c');
        $this->assertEquals(array('b', 'c'=>'c'), $r->get('a'));
        $r = new yRegistry();
        $r->push('a', $b);
        $r->push('a', 'c');
        $this->assertEquals(array('b'=>$b, 'c'=>'c'), $r->get('a'));
    }
    public function testCall(){
        $r = new yRegistry();
        $foo = new yRegistryTestObject('foo');
        $r->set($foo, function(){
                    return 'result';
                });
        $this->assertEquals('result', $r->call($foo));
    }
    public function testCallResult(){
        $r = new yRegistry();
        $foo = new yRegistryTestObject('foo');
        $r->set($foo, function(){
                    $x = '';
                    $result = 'result'.$x;
                    $x = '2';
                    return $result;
                });
        $this->assertEquals('result', $r->callResult($foo)); 
        // result must be calculated once (cached function result)
    }
    /**
     * @expectedException Exception
     */
    public function testCallException(){
        $r = new yRegistry();
        $r->call('foo2');
    }
    /**
     * @todo Implement testResult().
     */
    public function testResult(){
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
    /**
     * @todo Implement testResultArray().
     */
    public function testResultArray(){
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
}

?>

<?php

/**
 * Test class for yVirtualFileSystem.
 * Generated by PHPUnit on 2011-02-20 at 13:26:34.
 */
class yVirtualFileSystemTest extends PHPUnit_Framework_TestCase{
    /**
     * @var yVirtualFileSystem
     */
    protected $fs;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(){
        $this->fs = yVirtualFileSystem::getInstance();
        $fs = $this->fs;
        $localFs = new yLocalFileSystem();
        $fs->map('local', $localFs);
        $fs->map('base', $localFs->getResource(dirname(__FILE__)));
        $fs->map('test', $localFs->getResource(__FILE__));
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(){
        
    }
    /**
     * @todo Implement testMap().
     */
    public function testMap(){
        $s = yVirtualFileSystem::getSplitter();
        $fs = $this->fs;
        $res = $fs->getResource('test');
        $this->assertEquals(__FILE__, strval($res));
        $fs = yVirtualFileSystem::getInstance();
        $res = $fs->getResource('test');
        $this->assertEquals(__FILE__, strval($res));

        $res = $fs->getResource('local'.$s.__FILE__);
        $this->assertEquals(__FILE__, strval($res));
        $res = $fs->getResource('base'.$s.basename(__FILE__));
        $this->assertEquals(__FILE__, realpath(strval($res)));
        $res = $fs->getResource('base'.$s.'../file/'.basename(__FILE__));
        $this->assertEquals(__FILE__, realpath(strval($res)));
    }
    public function testUri(){
        $s = yVirtualFileSystem::getSplitter();
        $fs = $this->fs;
        $test = $fs->getResource('test');
        //var_dump($test);
        $test = $fs->getResource('test'.$s);
        //var_dump($test);
        $fs->mapUri('/', 'base'.$s);
        $fs->mapUri('/x', 'test'.$s);
        $base = $fs->getResource('base')->getFileSystem();
        //var_dump($base);
        //exit;
        $this->assertEquals($fs->getResource('base') instanceof yFilesystemResource, true);
        $res = $fs->getResource('base'.$s.basename(__FILE__));
        // FIXME: ????
        // $this->assertEquals('/'.basename(__FILE__), $res->getUri());
        $res = $fs->getResource('test'.$s);
        $this->assertEquals('/x', $res->getUri());
        $res = $fs->getResource('test');
        $this->assertEquals('/x', $res->getUri());
        $tmp = $fs->getResource('base'.$s.'file.tmp');
        //var_dump($tmp->getPath());
        $tmp->unlink();
        $this->assertEquals($tmp->exists(), false);
        $tmp->touch();
        $this->assertEquals($tmp->exists(), true);
        $tmp->upload(__FILE__);
        $this->assertEquals($tmp->getContents(), file_get_contents(__FILE__));
        $tmp->unlink();
        $tmp = $fs->getResource('base'.$s.'file.tmp'); // must be new resource
        $this->assertEquals($tmp instanceof yFilesystemResource, true);
        $this->assertEquals($tmp instanceof yFile, false);
        $this->assertEquals($tmp instanceof yDirectory, false);
        $this->assertEquals($tmp->exists(), false);
        $tmp->upload(__FILE__);
        $this->assertEquals($tmp->getContents(), file_get_contents(__FILE__));
        $this->assertEquals($tmp->exists(), true);
        $tmp->unlink();
        $this->assertEquals($tmp->exists(), false);
        $fs->upload(__FILE__, 'base'.$s.'file.tmp');
        $this->assertEquals($tmp->getContents(), file_get_contents(__FILE__));
        $this->assertEquals($tmp->exists(), true);
        $this->assertEquals('/file.tmp', $tmp->getUri());
        $tmp->unlink();
        $tmpDir = $fs->getResource('base'.$s.'tmpdir');
        $tmpDir->remove(true); // forced recursive removing
        $this->assertEquals($tmpDir->exists(), false);
        $tmpDir->mkDir();
        $this->assertEquals($tmpDir->exists(), true);
        $tmp = $tmpDir->getResource('file.tmp');
        $this->assertEquals($tmp->exists(), false);
        $tmp->upload(__FILE__);
        $this->assertEquals($tmp->exists(), true);
        $this->assertEquals($tmp->getUri(), '/tmpdir/file.tmp');
        $this->assertEquals($tmp->getContents(), file_get_contents(__FILE__));
        $tmpDir->remove(true); // forced recursive removing
        $this->assertEquals($tmp->exists(), false);
        $this->assertEquals($tmpDir->exists(), false);
        
    }
}
